@model Flores_De_Mayo_Information_System.Models.Application.CreateAlayanViewModel

@{
    ViewBag.Title = "AddAlayan";
    Layout = "~/Views/Shared/_BasicLayout.cshtml";

    List<SelectListItem> dropDates = new List<SelectListItem>();

    foreach (var date in TempData["availableDates"] as List<Flores_De_Mayo_Information_System.Models.Entity.AlayanDate>)
    {

        dropDates.Add(new SelectListItem
        {
            Text = "May " + date.Date,
            Value = date.ADatId.ToString()
        });

    }

    List<SelectListItem> dropTypes = new List<SelectListItem>();

    foreach (var aType in TempData["alayanTypes"] as List<Flores_De_Mayo_Information_System.Models.Entity.AlayanType>)
    {

        dropTypes.Add(new SelectListItem
        {
            Text = aType.Name,
            Value = aType.ATypId.ToString()
        });
    }

}

<p>@TempData["errorMsg"]</p>

@using (Html.BeginForm("CreateAlayan", "Alayan", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AlayType, htmlAttributes: new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                @Html.DropDownListFor(model => model.AlayType, dropTypes, "Select a choice...", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AlayType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AlayDate, htmlAttributes: new { @class = "control-label col-md-12" })
            <div class="col-md-12">
                @Html.DropDownListFor(model => model.AlayDate, dropDates, "Select a choice...", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AlayDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-12 col-md-12">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
